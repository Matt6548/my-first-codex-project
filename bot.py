import os
import requests
from langdetect import detect
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from faq_data import FAQ_DATA

# üîê –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏:
BOT_TOKEN = '7697595103:AAElGIoz281OUoWluFQOSlO7l79rM5vAP9M'  # ‚Üê —Å—é–¥–∞ —Ç–æ–∫–µ–Ω Telegram
GROQ_API_KEY = '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'  # ‚Üê —Å—é–¥–∞ Groq API –∫–ª—é—á

SUPPORTED_LANGS = {"uz", "ru", "en"}

def find_faq_answer(query: str, lang: str) -> str | None:
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ FAQ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ‚â• 50%)."""
    faq = FAQ_DATA.get(lang, {})
    words = set(query.lower().split())
    best_score = 0
    best_answer = None
    for q, ans in faq.items():
        q_words = set(q.lower().split())
        if not q_words:
            continue
        score = len(words & q_words) / len(q_words)
        if score > best_score:
            best_score = score
            best_answer = ans
    if best_score >= 0.5:
        return best_answer
    return None

async def generate_ai_answer(question: str, lang: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Groq API (LLaMA 3) ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ."""
    url = "https://api.groq.com/openai/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    system_prompt = f"–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ {lang} —è–∑—ã–∫–µ. –ü–∏—à–∏ —è—Å–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."

    data = {
        "model": "llama3-70b-8192",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "temperature": 0.2,
        "max_tokens": 400
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        result = response.json()
        ai_answer = result['choices'][0]['message']['content'].strip()
        return f"ü§ñ –ò–ò-–æ—Ç–≤–µ—Ç:\n{ai_answer}"
    except Exception as e:
        print(f"Groq API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

def log_interaction(question: str, answer: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ log.txt."""
    with open("log.txt", "a", encoding="utf-8") as f:
        f.write(f"Q: {question}\nA: {answer}\n\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language uz|ru|en –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /language."""
    if context.args:
        lang = context.args[0].lower()
        if lang in SUPPORTED_LANGS:
            context.user_data["lang"] = lang
            await update.message.reply_text(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}.")
            return
    await update.message.reply_text("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /language uz|ru|en")

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—Ç–∏—Ç—å –∏–∑ FAQ –∏–ª–∏ —á–µ—Ä–µ–∑ –ò–ò."""
    question_raw = update.message.text.strip()

    lang = context.user_data.get("lang")
    if not lang:
        try:
            lang = detect(question_raw).split("-")[0]
        except Exception:
            lang = "ru"
        if lang not in SUPPORTED_LANGS:
            lang = "ru"
        context.user_data["lang"] = lang

    answer = find_faq_answer(question_raw, lang)
    if not answer:
        answer = await generate_ai_answer(question_raw, lang)

    await update.message.reply_text(answer)
    log_interaction(question_raw, answer)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    if not BOT_TOKEN:
        raise RuntimeError('BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω.')

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('language', set_language))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
