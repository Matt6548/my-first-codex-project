import os
import requests
from langdetect import detect
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from faq_data import FAQ_DATA

# üîê –ö–ª—é—á–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = '7697595103:AAElGIoz281OUoWluFQOSlO7l79rM5vAP9M'  # ‚Üê —Å—é–¥–∞ —Ç–æ–∫–µ–Ω Telegram
GROQ_API_KEY = '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'  # ‚Üê —Å—é–¥–∞ Groq API –∫–ª—é—á

SUPPORTED_LANGS = {"uz", "ru", "en"}


def find_faq_answer(query: str, lang: str) -> str | None:
    """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ FAQ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (‚â• 50%)."""
    faq = FAQ_DATA.get(lang, {})
    words = set(query.lower().split())
    best_score = 0
    best_answer = None
    for q, ans in faq.items():
        q_words = set(q.lower().split())
        if not q_words:
            continue
        score = len(words & q_words) / len(q_words)
        if score > best_score:
            best_score = score
            best_answer = ans
    return best_answer if best_score >= 0.5 else None


async def generate_ai_answer(question: str, lang: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Groq API (LLaMA 3)."""
    url = "https://api.groq.com/openai/v1/chat/completions"

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    system_prompt = f"–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ {lang} —è–∑—ã–∫–µ. –ü–∏—à–∏ —è—Å–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."

    data = {
        "model": "llama3-70b-8192",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ],
        "temperature": 0.2,
        "max_tokens": 400
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        result = response.json()
        ai_answer = result['choices'][0]['message']['content'].strip()
        return f"ü§ñ –ò–ò-–æ—Ç–≤–µ—Ç:\n{ai_answer}"
    except Exception as e:
        print(f"Groq API error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."


def log_interaction(question: str, answer: str) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª."""
    with open("log.txt", "a", encoding="utf-8") as f:
        f.write(f"Q: {question}\nA: {answer}\n\n")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language uz|ru|en –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."
    )


async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        lang = context.args[0].lower()
        if lang in SUPPORTED_LANGS:
            context.user_data["lang"] = lang
            await update.message.reply_text(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}.")
            return
    await update.message.reply_text("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /language uz|ru|en")


async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_raw = update.message.text.strip()

    lang = context.user_data.get("lang")
    if not lang:
        try:
            lang = detect(question_raw).split("-")[0]
        except Exception:
            lang = "ru"
        if lang not in SUPPORTED_LANGS:
            lang = "ru"
        context.user_data["lang"] = lang

    answer = find_faq_answer(question_raw, lang)
    if not answer:
        answer = await generate_ai_answer(question_raw, lang)

    await update.message.reply_text(answer)
    log_interaction(question_raw, answer)


def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError('–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.')

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('language', set_language))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^(pdf|excel)$"), handle_report_request))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))


    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


# ==== Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ====
from flask import Flask
import threading

app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

# üü¢ –ó–∞–ø—É—Å–∫ Flask-–ø–æ—Ç–æ–∫–∞ –∏ –±–æ—Ç–∞
threading.Thread(target=run_flask).start()

if __name__ == '__main__':
    main()
# 1. –ò–º–ø–æ—Ä—Ç
import os
from uuid import uuid4

# 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ main()
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return

    file = await context.bot.get_file(document.file_id)
    file_extension = document.file_name.split('.')[-1]
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    file_path = os.path.join(temp_dir, f"{uuid4().hex}.{file_extension}")
    await file.download_to_drive(file_path)

    context.user_data["uploaded_file_path"] = file_path

    await update.message.reply_text(
        f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {document.file_name}\n–ö–∞–∫–æ–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å?\n\n–ù–∞–ø–∏—à–∏—Ç–µ: `pdf` –∏–ª–∏ `excel`",
        parse_mode="Markdown"
    )

import pandas as pd
from fpdf import FPDF

async def handle_report_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text.lower().strip()
    file_path = context.user_data.get("uploaded_file_path")

    if message not in ["pdf", "excel"] or not file_path:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏-–æ—Ç—á—ë—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        report_path = ""
        if message == "excel":
            df = pd.DataFrame([["–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω", file_path]])
            report_path = file_path.replace(".", "_report.") + "xlsx"
            df.to_excel(report_path, index=False)
        elif message == "pdf":
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="–û—Ç—á—ë—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É", ln=True)
            pdf.cell(200, 10, txt=f"–ü—É—Ç—å: {file_path}", ln=True)
            report_path = file_path.replace(".", "_report.") + "pdf"
            pdf.output(report_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_document(document=open(report_path, "rb"))

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(file_path)
        os.remove(report_path)
        context.user_data.clear()

    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
