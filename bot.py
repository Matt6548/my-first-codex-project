import os
import requests
from uuid import uuid4
from langdetect import detect
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from flask import Flask
import threading
import pandas as pd
import pdfplumber
from dotenv import load_dotenv
from faq_data import FAQ_DATA
import openai

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

SUPPORTED_LANGS = {"uz", "ru", "en"}

def find_faq_answer(query: str, lang: str) -> str | None:
    faq = FAQ_DATA.get(lang, {})
    words = set(query.lower().split())
    best_score = 0
    best_answer = None
    for q, ans in faq.items():
        q_words = set(q.lower().split())
        if not q_words:
            continue
        score = len(words & q_words) / len(q_words)
        if score > best_score:
            best_score = score
            best_answer = ans
    return best_answer if best_score >= 0.5 else None

async def generate_ai_answer(question: str, lang: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": f"–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ {lang} —è–∑—ã–∫–µ. –ü–∏—à–∏ —è—Å–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."},
                {"role": "user", "content": question}
            ],
            temperature=0.2,
            max_tokens=400
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"OpenAI API error: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

def log_interaction(question: str, answer: str) -> None:
    with open("log.txt", "a", encoding="utf-8") as f:
        f.write(f"Q: {question}\nA: {answer}\n\n")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /language uz|ru|en –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        lang = context.args[0].lower()
        if lang in SUPPORTED_LANGS:
            context.user_data["lang"] = lang
            await update.message.reply_text(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang}.")
            return
    await update.message.reply_text("–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /language uz|ru|en")

async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_raw = update.message.text.strip()
    lang = context.user_data.get("lang")
    if not lang:
        try:
            lang = detect(question_raw).split("-")[0]
        except Exception:
            lang = "ru"
        if lang not in SUPPORTED_LANGS:
            lang = "ru"
        context.user_data["lang"] = lang
    answer = find_faq_answer(question_raw, lang)
    if not answer:
        answer = await generate_ai_answer(question_raw, lang)
    await update.message.reply_text(answer)
    log_interaction(question_raw, answer)

async def extract_text_from_pdf(path: str) -> str:
    try:
        with pdfplumber.open(path) as pdf:
            text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
            return text.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
        return ""

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    file = await context.bot.get_file(document.file_id)
    file_extension = document.file_name.split('.')[-1]
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    file_path = os.path.join(temp_dir, f"{uuid4().hex}.{file_extension}")
    await file.download_to_drive(file_path)
    context.user_data["uploaded_file_path"] = file_path
    await update.message.reply_text(
        f"üìÑ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: {document.file_name}\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –æ—Ç—á—ë—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Ñ–∞–π–ª–∞."
    )

async def handle_report_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    request = update.message.text.strip()
    file_path = context.user_data.get("uploaded_file_path")
    if not file_path:
        return
    try:
        lang = context.user_data.get("lang", "ru")
        if file_path.endswith(".pdf"):
            content = await extract_text_from_pdf(file_path)
        elif file_path.endswith(".xlsx"):
            df = pd.read_excel(file_path)
            content = df.to_string()
        else:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return

        full_prompt = f"–í–æ—Ç –¥–∞–Ω–Ω—ã–µ: {content[:1500]}\n\n{request}"
        answer = await generate_ai_answer(full_prompt, lang)
        await update.message.reply_text(f"üìä –ê–Ω–∞–ª–∏–∑:\n\n{answer}")

        os.remove(file_path)
        context.user_data.clear()
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

def main() -> None:
    if not BOT_TOKEN:
        raise RuntimeError('–£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.')
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('language', set_language))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_report_request))
    application.add_handler(MessageHandler(filters.COMMAND, answer_question))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# ==== Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ====
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_flask():
    app.run(host="0.0.0.0", port=10000)

threading.Thread(target=run_flask).start()

if __name__ == '__main__':
    main()
